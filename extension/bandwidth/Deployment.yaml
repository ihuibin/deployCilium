apiVersion: apps/v1
kind: Deployment
metadata:
  name: bandwidth-ctl
  namespace: bandwidth-ctl
  labels:
    app: bandwidth-ctl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: bandwidth-ctl
  template:
    metadata:
      labels:
        app: bandwidth-ctl
      annotations:
        ipam.spidernet.io/ippools: '[{"interface":"eth0","ipv4":["pool1"]}]'
        v1.multus-cni.io/default-network: kube-system/vlan29
    spec:
      hostPID: true
      dnsPolicy: ClusterFirst
      initContainers:
        - name: init-sysctl
          image: docker.m.daocloud.io/library/alpine:latest
          command: ['sh', '-c']
          args:
            - |
              echo "üîß ÊâßË°åÁΩëÁªúÂèÇÊï∞ÂàùÂßãÂåñ..."
              
              # === ‰Ω†Ë¶ÅÊ±ÇÁöÑ rp_filter ÂëΩ‰ª§ ===
              echo 0 > /proc/sys/net/ipv4/conf/all/rp_filter
              echo 0 > /proc/sys/net/ipv4/conf/default/rp_filter
              for interface in /proc/sys/net/ipv4/conf/*/rp_filter; do
                  echo 0 > "$interface"
              done
              # === ÁªìÊùü ===
              
              echo "üìÇ Êã∑Ë¥ù ingress.sh Âíå egress.sh Âà∞‰∏ªÊú∫..."
              # ÂàõÂª∫ÁõÆÊ†áÁõÆÂΩï
              mkdir -p /host-opt/bandwidth-ctl
              
              # Êã∑Ë¥ùÊñá‰ª∂
              if [ -f "/ingress.sh" ]; then
                  cp /ingress.sh /host-opt/bandwidth-ctl/
                  chmod +x /host-opt/bandwidth-ctl/ingress.sh
                  echo "‚úÖ ingress.sh Â∑≤Êã∑Ë¥ùÂà∞ /opt/bandwidth-ctl/"
              else
                  echo "‚ö†Ô∏è ingress.sh Êñá‰ª∂‰∏çÂ≠òÂú®"
              fi
              
              if [ -f "/egress.sh" ]; then
                  cp /egress.sh /host-opt/bandwidth-ctl/
                  chmod +x /host-opt/bandwidth-ctl/egress.sh
                  echo "‚úÖ egress.sh Â∑≤Êã∑Ë¥ùÂà∞ /opt/bandwidth-ctl/"
              else
                  echo "‚ö†Ô∏è egress.sh Êñá‰ª∂‰∏çÂ≠òÂú®"
              fi
              
              echo "üíæ Êõ¥Êñ∞ÊåÅ‰πÖÂåñÈÖçÁΩÆ..."
              CONF_FILE="/host-sysctl/50-default.conf"
              if [ -f "$CONF_FILE" ]; then
                  cp "$CONF_FILE" "$CONF_FILE.bak.$(date +%s)" 2>/dev/null || true
                  sed -i 's/net.ipv4.conf.default.rp_filter = 2/net.ipv4.conf.default.rp_filter = 0/' "$CONF_FILE" 2>/dev/null || true
                  sed -i 's/net.ipv4.conf.*.rp_filter = 2/net.ipv4.conf.*.rp_filter = 0/' "$CONF_FILE" 2>/dev/null || true
                  sysctl -p "$CONF_FILE" 2>/dev/null || true
              else
                  echo "‚ö†Ô∏è ÈÖçÁΩÆÊñá‰ª∂‰∏çÂ≠òÂú®: $CONF_FILE"
              fi
              
              echo "‚úÖ initContainer ÊâßË°åÂÆåÊàê"
          securityContext:
            privileged: true
          volumeMounts:
            - name: sysctl-dir
              mountPath: /host-sysctl
            - name: opt-dir
              mountPath: /host-opt

      containers:
        - name: bandwidth-ctl
          image: release.daocloud.io/spidernet-io/bandwidth-ctl:v1
          imagePullPolicy: Always
          command: ["/bin/sh", "-c"]
          args:
            - |
              echo "üöÄ ÂêØÂä® bandwidth-ctl ÊúçÂä°..."
              while true; do sleep 30; done
          securityContext:
            privileged: true
          volumeMounts:
            - name: sysctl-dir
              mountPath: /host-sysctl
            - name: opt-dir
              mountPath: /host-opt
      volumes:
        - name: sysctl-dir
          hostPath:
            path: /usr/lib/sysctl.d
            type: DirectoryOrCreate
        - name: opt-dir
          hostPath:
            path: /opt
            type: Directory
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/hostname
                    operator: In
                    values:
                      - g-master13
      schedulerName: default-scheduler
      tolerations:
        - key: node.kubernetes.io/not-ready
          operator: Exists
          effect: NoExecute
          tolerationSeconds: 300
        - key: node.kubernetes.io/unreachable
          operator: Exists
          effect: NoExecute
          tolerationSeconds: 300
      dnsConfig: {}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
